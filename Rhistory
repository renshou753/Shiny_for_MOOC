# Portfolio weights Boeing and Microsoft
plot(global_min_var_portfolio)
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
sharp_min<-(0.2105954-0.03)/0.2139033
sharp_min
# The tangency portfolio
tangency_portfolio = tangency.portfolio(mu_hat_annual, cov_mat_annual,risk.free=0.03)
tangency_portfolio
# Summary of tangency_portfolio with annual risk free rate of 3%
summary(tangency_portfolio ,risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(tangency_portfolio)
tangency.portfolio <-
function(er,cov.mat,risk.free)
{
# compute tangency portfolio
#
# inputs:
# er    			   N x 1 vector of expected returns
# cov.mat		   N x N return covariance matrix
# risk.free		 scalar, risk-free rate
#
# output is portfolio object with the following elements
# call			  captures function call
# er				  portfolio expected return
# sd				  portfolio standard deviation
# weights		 N x 1 vector of portfolio weights
call <- match.call()
#
# check for valid inputs
#
asset.names <- names(er)
if(risk.free < 0)
stop("Risk-free rate must be positive")
er <- as.vector(er)
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("invalid inputs")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
# remark: could use generalized inverse if cov.mat is positive semi-definite
#
# compute global minimum variance portfolio
#
gmin.port <- globalMin.portfolio(er,cov.mat)
if(gmin.port$er < risk.free)
stop("Risk-free rate greater than avg return on global minimum variance portfolio")
#
# compute tangency portfolio
#
cov.mat.inv <- solve(cov.mat)
w.t <- cov.mat.inv %*% (er - risk.free) # tangency portfolio
w.t <- as.vector(w.t/sum(w.t))	# normalize weights
names(w.t) <- asset.names
er.t <- crossprod(w.t,er)
sd.t <- sqrt(t(w.t) %*% cov.mat %*% w.t)
tan.port <- list("call" = call,
"er" = as.vector(er.t),
"sd" = as.vector(sd.t),
"weights" = w.t)
class(tan.port) <- "portfolio"
tan.port
}
# The tangency portfolio
tangency_portfolio = tangency.portfolio(mu_hat_annual, cov_mat_annual,risk.free=0.03)
tangency_portfolio
# Summary of tangency_portfolio with annual risk free rate of 3%
summary(tangency_portfolio ,risk.free=0.03)
# Portfolio weights Boeing and Microsoft
plot(tangency_portfolio)
sharp_ten<-(0.2507215-0.03)/0.2364756
sharp_ten
# Set of tangency portfolio weights
tangency_weights = seq(from=0, to=2, by=0.1)
# Portfolio parameters
mu_portfolio_tangency_bill = t_bill_rate + tangency_weights*(tangency_portfolio$er-t_bill_rate)
sigma_portfolio_tangency_bill = tangency_weights*tangency_portfolio$sd
# Plot previous exercises
plot(sigma_portfolio, mu_portfolio, type="b", pch=16, ylim=c(0, max(mu_portfolio)), xlim=c(0, max(sigma_portfolio)), xlab=expression(sigma[p]), ylab=expression(mu[p]),col=c(rep("green", 18), rep("red", 13)))
text(x=sigma_boeing, y=mu_boeing, labels="Boeing", pos=4)
text(x=sigma_msft, y=mu_msft, labels="MSFT", pos=4)
# Plot portfolio combinations of tangency portfolio and T-bills
text(x=tangency_portfolio$sd, y=tangency_portfolio$er, labels="Tangency", pos=2)
points(sigma_portfolio_tangency_bill, mu_portfolio_tangency_bill, type="b", col="blue", pch=16)
tangency_weight = 0.1
t_bill_weight = 1 - tangency_weight
# Define the portfolio parameters
mu_portfolio_efficient = t_bill_rate + tangency_weight*(tangency_portfolio$er - t_bill_rate)
sd_portfolio_efficient = tangency_weight*tangency_portfolio$sd
mu_portfolio_efficient
sd_portfolio_efficient
sharp_eff<-(.05207215-0.03)/.02364756
sharp_eff
sigma_boeing/tangency_portfolio$sd
tangency_portfolio
sigma_msft/tangency_portfolio$sd
tangency_weight  = sigma_msft/tangency_portfolio$sd
mu_portfolio_efficient = t_bill_rate + tangency_weight*(tangency_portfolio$er - t_bill_rate)
sd_portfolio_efficient = tangency_weight*tangency_portfolio$sd
mu_portfolio_efficient
sd_portfolio_efficient
(0.3753944 -0.03)/0.3700472
tangency_weight
globalMin.portfolio <-
function(er, cov.mat)
{
# Compute global minimum variance portfolio
#
# inputs:
# er    			N x 1 vector of expected returns
# cov.mat		N x N return covariance matrix
#
# output is portfolio object with the following elements
# call			original function call
# er				portfolio expected return
# sd				portfolio standard deviation
# weights		N x 1 vector of portfolio weights
call <- match.call()
#
# check for valid inputs
#
asset.names <- names(er)
er <- as.vector(er)					# assign names if none exist
cov.mat <- as.matrix(cov.mat)
if(length(er) != nrow(cov.mat))
stop("invalid inputs")
if(any(diag(chol(cov.mat)) <= 0))
stop("Covariance matrix not positive definite")
# remark: could use generalized inverse if cov.mat is positive semi-definite
#
# compute global minimum portfolio
#
cov.mat.inv <- solve(cov.mat)
one.vec <- rep(1,length(er))
#  w.gmin <- cov.mat.inv %*% one.vec/as.vector(one.vec %*% cov.mat.inv %*% one.vec)
w.gmin <- rowSums(cov.mat.inv) / sum(cov.mat.inv)
w.gmin <- as.vector(w.gmin)
names(w.gmin) <- asset.names
er.gmin <- crossprod(w.gmin,er)
sd.gmin <- sqrt(t(w.gmin) %*% cov.mat %*% w.gmin)
gmin.port <- list("call" = call,
"er" = as.vector(er.gmin),
"sd" = as.vector(sd.gmin),
"weights" = w.gmin)
class(gmin.port) <- "portfolio"
gmin.port
}
global_min_var_portfolio = globalMin.portfolio(mu_hat_annual,cov_mat_annual)
mu_hat_annual
cov_mat_annual
inverse<-solve(cov_mat_annual)
solve(cov_mat_annual)
solve(cov_mat_annual)%*%cov_mat_annual
one.vec <- rep(1,length(mu_hat_annual))
one.vec
one.vec %*% inverse %*% one.vec
cov.mat.inv<-inverse
w.gmin <- cov.mat.inv %*% one.vec/as.vector(one.vec %*% cov.mat.inv %*% one.vec)
w.gmin
rowSums(cov.mat.inv) / sum(cov.mat.inv)
w.gmin <- rowSums(cov.mat.inv) / sum(cov.mat.inv)
crossprod(w.gmin,mu_hat_annual)
global_min_var_portfolio
c(rep(0,3),1)
asset.names<-c("MSFT","NORD","SBUX")
mu.vec<-c(0.0427,0.0015,0.0285)
names(mu.vec)<-asset.names
sigma.mat<-matrix(c(0.01,0.0018,0.0011,0.0018,0.0109,0.0026,0.0011,0.0026,0.0199),nrow=3)
sigma.mat
top.mat<-cbind(2*sigma.mat,rep(1,3))
top.mat
bot.vec<-c(rep(0,3),1)
am.mat<-cbind(top.mat,bot.vec)
am.mat<-rbind(top.mat,bot.vec)
am.mat
bot.vec<-c(rep(1,3),0)
b.vec<-c(rep(0,3),1)
am.mat<-rbind(top.mat,bot.vec)
am.mat
top.mat<-cbind(2*sigma.mat,mu.vec,rep(1,3))
top.mat
mid.vec<-c(mu.vec,0,0)
mid.vec
bot.vec<-c(rep(1,3),0,0)
bot.vec
am.mat<-rbind(top.mat,mid.vec,bot.vec)
am.mat
asset.names<-c("MSFT","NORD","SBUX")
mu.vec<-c(0.0427,0.0015,0.0285)
names(mu.vec)<-asset.names
sigma.mat<-matrix(c(0.01,0.0018,0.0011,0.0018,0.0109,0.0026,0.0011,0.0026,0.0199),nrow=3)
sigma.mat
top.mat<-cbind(2*sigma.mat,mu.vec,rep(1,3))
mid.vec<-c(mu.vec,0,0)
bot.vec<-c(rep(1,3),0,0)
am.mat<-rbind(top.mat,mid.vec,bot.vec)
am.mat
bmsft.mat<-c(rep(0,3),mu.vec["MSFT"],1)
bmsft.mat
solve(am.mat)
am.mat%*%solve(am.mat)
z.mat<-solve(am.mat) %*% bmsft.mat
z.mat
x.vec<-z.mat[1ï¼š3,]
x.vec<-z.mat[1:3,]
x.vec
bsbux.mat<-c(rep(0,3),mu.vec["SBUX"],1)
z.mat<-solve(am.mat) %*% bsbux.mat
y.vec<-z.mat[1:3,]
y.vec
a=0.5
z.vec<-a*x.vec+(1-a)*y.vec
z.vec
sigma.xy=as.numeric(t(x.vec) %*% sigma.mat %*% y.vec)
sigma.xy
mu.pz=as.numeric(crossprod(z.vec,mu.vec))
sig2.pz=as.numeric(t(z.vec) %*% sigma.mat %*% z.vec)
sig2.pz
library("zoo")
# Load the working environment
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab9.RData"))
# Explore the data set
head(returns_df)
tail(returns_df)
# Timeplots of stocks on seperate graphs
my.panel <- function(...) {
lines(...)
abline(h=0)
}
ma.panel
my.panel
plot(returns_df, lwd=2, panel=my.panel, col="blue")
plot(returns_df, plot.type = "single", main="Returns", col=1:4, lwd=2)
abline(h=0)
legend(x="bottomleft", legend=colnames(returns_df), col=1:4, lwd=2)
# Parameters CER model
mu_hat_month = apply(returns_df, 2, mean)
mu_hat_month
sigma2_month = apply(returns_df, 2, var)
sigma2_month
sigma_month = apply(returns_df, 2, sd)
sigma_month
cov_mat_month = var(returns_df)
cov_mat_month
cor_mat_month = cor(returns_df)
cor_mat_month
# Pairwise scatterplots
pairs(coredata(returns_df), col="blue", pch=16)
global_min_var_portfolio = globalMin.portfolio(mu_hat_month, cov_mat_month,shorts=TRUE)
global_min_var_portfolio
# Plot the portfolio weights of our four stocks
plot(global_min_var_portfolio)
cov_mat_month
mu_target = max(mu_hat_month)
# short sales allowed
efficient_porfolio_short = efficient.portfolio(mu_hat_month, cov_mat_month, mu_target,shorts=TRUE)
efficient_porfolio_short
plot(efficient_porfolio_short)
efficient_porfolio_no_short = efficient.portfolio(mu_hat_month, cov_mat_month, mu_target,shorts=FALSE)
efficient_porfolio_no_short
plot(efficient_porfolio_no_short)
efficient_porfolio_short = efficient.portfolio(mu_hat_month, cov_mat_month, mu_target,shorts=FALSE)
library("quadprog", lib.loc="D:/software/R-3.1.0/library")
efficient_porfolio_no_short = efficient.portfolio(mu_hat_month, cov_mat_month, mu_target,shorts=FALSE)
efficient_porfolio_no_short
plot(efficient_porfolio_no_short)
# The efficient frontier of risky assets
efficient_frontier = efficient.frontier(mu_hat_month, cov_mat_month, alpha.min=-1, alpha.max=1)
summary(efficient_frontier)
# The plot
plot(efficient_frontier, plot.assets=TRUE, col="blue", lwd=2)
?globalMin.portfolio
globalMin.portfolio
efficient_frontier
efficient_frontier = efficient.frontier(mu_hat_month, cov_mat_month, alpha.min=.5, alpha.max=.5)
efficient_frontier
t_bill_rate = 0.005
# Tangency portfolio short sales allowed
tangency_portfolio_short = tangency.portfolio(mu_hat_month, cov_mat_month, risk.free=t_bill_rate,shorts=TRUE)
summary(tangency_portfolio_short)
#plot
plot(tangency_portfolio_short)
# Tangency portfolio short sales not allowed
tangency_portfolio_no_short = tangency.portfolio(mu_hat_month, cov_mat_month, risk.free=t_bill_rate,shorts=FALSE)
summary(tangency_portfolio_no_short)
#plot
plot(tangency_portfolio_no_short)
library("PerformanceAnalytics")
library("zoo")
# Load the data
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/compfin/lab8.RData"))
# Explore the data set
head(returns_df)
mu_hat_annual = apply(returns_df,2,mean)*12
sigma2_annual = apply(returns_df,2,var)*12
sigma_annual = sqrt(sigma2_annual)
cov_mat_annual = cov(returns_df)*12
cov_hat_annual = cov(returns_df)[1,2]*12
rho_hat_annual = cor(returns_df)[1,2]
cov_mat_annual
cov_hat_annual = cov(returns_df)[1,2]*12
cov_hat_annual
a<-0.318181818
a<-(0.01-0.0128)/(0.4/100-0.0128)
a
b<-1-a
0.23*a+(-1.97*b)
0.87*a+1.51*b
-0.1*a+1.45*b
0.23*a+(-1.2*b)
a<-0.226205
1/a
qnorm(0.05,mean=0.004,sd=0.0284)
qnorm(0.05,mean=0.0083,sd=0.0216)
exp(-0.04271384)-1
install.packages("shiny")
libray(shiny)
library(shiny)
library("shiny")
devtools::install_github('rstudio/shinyapps')
install.packages("Rtools")
if(!file.exists("./char_final.csv")) {
fileUrl <- "https://github.com/benkahle/bayesianGameofThrones/blob/master/char_final.csv"
download.file(fileUrl, destfile = "./char_final.csv")
}
if(!file.exists("./char_final.csv")) {
fileUrl <- "https://github.com/benkahle/bayesianGameofThrones/blob/master/char_final.csv"
download.csv(fileUrl, destfile = "./char_final.csv")
}
fpe <- read.table("https://github.com/benkahle/bayesianGameofThrones/blob/master/char_final.csv")
read.table("https://github.com/benkahle/bayesianGameofThrones/blob/master/char_final.csv")
read.table("https://raw.githubusercontent.com/benkahle/bayesianGameofThrones/master/char_final.csv")
if(!file.exists("./char_final.csv")) {
fileUrl <- "https://raw.githubusercontent.com/benkahle/bayesianGameofThrones/master/char_final.csv"
download.csv(fileUrl, destfile = "./char_final.csv")
}
if(!file.exists("./char_final.csv")) {
fileUrl <- "https://raw.githubusercontent.com/benkahle/bayesianGameofThrones/master/char_final.csv"
download.csv(fileUrl, destfile = "./char_final.csv")
}
if(!file.exists("./char_final.csv")) {
fileUrl <- "https://raw.githubusercontent.com/benkahle/bayesianGameofThrones/master/char_final.csv"
download.file(fileUrl, destfile = "./char_final.csv")
}
setwd("~/program R/thrones")
char_final <- read.csv("~/program R/thrones/char_final.csv")
View(char_final)
a<-read.csv("char_final.csv",sep=",",header=T)
View(a)
char_final<-read.csv("char_final.csv",sep=",",header=T)
rm(a)
char<-read.csv("char_final.csv",sep=",",header=T)
rm(char_final)
View(char)
name1<-subset("John",char$Name)
library(shiny)
runExample("03_reactivity")
if (packageVersion('shiny') > '0.7') {
library(shiny)
runGitHub("shiny-examples", "rstudio", subdir = "012-datatables")
}
runGitHub("shiny-examples", "rstudio", subdir = "012-datatables")
install.packages("DT")
runGitHub("shiny-examples", "rstudio", subdir = "012-datatables")
diamond
library(dataset)
diamonds
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runExample("06_tabsets")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
summary(char)
char1<-char[c(-1,-2,-3),]
View(char1)
char1<-char[c(-1,-2,-3),-1]
View(char1)
char1<-char[c(-1,-2,-3),]
View(char1)
row.names(char)<-char.row
row.names
row.names(char1)<-row(char1)
row(char1)
char1<-char(-c(1:3),)
char1<-char[-c(1:3),]
View(char1)
rownames(char1)
row.names(char1)<-row(char1[1,])
row.names(char1)
row(char1[1,])
row(char1[,1])
row(matrix(char1[,1]))
rownames(char1)<-row(matrix(char1[,1]))
View(char1)
char<-char[-c(1:3),]
View(char)
rownames(char)<-row(matrix(char[,1]))
View(char)
rm(char1)
shiny::runApp()
str(char)
library(ggplot2)
ggplot(aes(Allegiances,Death.Year,data=char)+geom_bar(stat="identity")+coord_polar()
)
ggplot(aes(Allegiances,Death.Year),data=char)+geom_bar(stat="identity")+coord_polar()
ggplot(aes(Allegiances,log(Death.Year)),data=char)+geom_bar(stat="identity")+coord_polar()
corrgram(char,order=T,lower.panel=panel.shade,upper.panel=panel.pie,text.panel=panel.txt,main="correrogram of mtcars")
library(corrgram)
corrgram(char,order=T,lower.panel=panel.shade,upper.panel=panel.pie,text.panel=panel.txt,main="correrogram of mtcars")
ggplot(aes(Gender,Death.Year,fill=Allengiances),data=char)+facet_grid(.~Nobility)+geom_boxplot()
ggplot(aes(Gender,Death.Year,fill=Allegiances),data=char)+facet_grid(.~Nobility)+geom_boxplot()
ggplot(aes(Allegiances,Death.Year,fill=Gender),data=char)+facet_grid(.~Nobility)+geom_boxplot()
ggplot(aes(Gender,Death.Year),data=char)+facet_grid(.~Nobility)+geom_boxplot()
ggplot(aes(Book.of.Death,Death.Year),data=char)+facet_grid(.~Gender)+geom_boxplot()
ggplot(aes(Book.of.Death,Death.Year),data=char)+facet_grid(.~Gender)+geom_point()
ggplot(aes(Allegiances,Death.Year),data=char)+facet_grid(.~Gender)+geom_point()
ggplot(aes(Gender,Death.Year),data=char)+geom_point()
ggplot(aes(Gender,Death.Year),data=char)+boxplot()
ggplot(aes(Gender,Death.Year),data=char)+geom_boxplot()
str(char)
char$Gender<-as.factor(as.character(char$Gender))
str(char)
ggplot(aes(Gender,Death.Year),data=char)+geom_boxplot()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
alive<-subset(char,Allegiances=="NONE")
alive<-subset(char,Allegiances=="None")
noneAllegiances<-subset(char,Allegiances=="None")
ggplot(aes(Allegiances,Death.Year),data=noneAllegiances)+geom_bar(stat="identity")+coord_polar()
View(noneAllegiances)
Alle<-subset(char,-Allegiances=="None")
Alle<- -subset(char,Allegiances=="None")
Alle<- char[-noneAllegiances,]
Alle<- subset(char,Allegiances>"None")
Alle<- subset(char,Allegiances== c("None"))
Alle<- subset(char,Allegiances== -c("None"))
"none" %in% char$Allegiances
grepl("none", char$Allegiances)
grepl("None", char$Allegiances)
alle<-subset(char,grepl("None", char$Allegiances))
View(Alle)
alle<-subset(char,-grepl("None", char$Allegiances))
alle<-char[-grepl("None", char$Allegiances),]
View(Alle)
alle<-char[!grepl("None", char$Allegiances),]
alle<-subset(char,!grepl("None", char$Allegiances))
alle<-!subset(char,grepl("None", char$Allegiances))
Alle<- subset(char,!Allegiances=="None")
ggplot(aes(Allegiances,Death.Year),data=Alle)+geom_bar(stat="identity")+coord_polar()
ggplot(aes(Allegiances,log(Death.Year),data=Alle)+geom_bar(stat="identity")+coord_polar()
)
ggplot(aes(Allegiances,log(Death.Year)),data=Alle)+geom_bar(stat="identity")+coord_polar()
shiny::runApp()
library(dplyr)
View(Alle)
Allemost<-arrange(Alle,desc(Death.Year))[1:10,]
View(Allemost)
Allemost<-summarize(Allegiances,death_most=sum(Death.Year))
by_Alle<-group_by(Alle,Allegiances)
Allemost<-summarize(by_Alle,death=sum(Death.Year))
View(Allemost)
str(char)
Allemost<-summarize(by_Alle,death=!is.na(sum(Death.Year)))
View(Allemost)
View(Alle)
Allemost<-summarize(by_Alle,death=sum(Death.Year),na.rm=T)
View(Allemost)
Allemost<-summarize(by_Alle,death=sum(Death.Year,na.rm=T))
View(Allemost)
ggplot(aes(Allegiances,Death.Year),data=Allemost)+geom_bar(stat="identity")+coord_polar()
ggplot(aes(Allegiances,death),data=Allemost)+geom_bar(stat="identity")+coord_polar()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
